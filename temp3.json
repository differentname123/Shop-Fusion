帮我调整下面的代码，当用户点击确定之后，+X动画和能量条增长动画才播放，不然用户不太能够注意到。不要额外增加提示弹窗
lottery.js代码如下:
// pages/lottery/lottery.js
const { prizes: initialPrizes } = require('config.js');

Page({
  data: {
    points: 50,
    energy: 0,
    energyPercentage: 0,
    energyDisplay: '0.00', // 用于显示格式化的幸运值
    energyIncrease: 0, // 显示本次增加的能量
    showEnergyIncrease: false, // 控制+X的显示
    prizes: JSON.parse(JSON.stringify(initialPrizes)),
    spinCount: 0,
    propCount: 0,
  },
  onLoad() {
    this.getUserPoints();
  },
  getUserPoints() {
    this.setData({
      points: 50,
    });
  },
  consumePoints({ detail: { points } }) {
    this.updatePoints(-points);
  },
  addPoints({ detail: { points } }) {
    this.updatePoints(points);
  },
  updatePoints(change) {
    this.setData({
      points: this.data.points + change,
    });
  },
  updateEnergy() {
    const currentEnergy = this.data.energy;
    const increase = (100 - currentEnergy) / 10; // 按现有规则计算的增加量
    const newEnergy = Math.min(100, currentEnergy + increase);

    // 设置增加的幸运值，但不立即播放动画
    this.setData({
      energyIncrease: increase.toFixed(2),
      showEnergyIncrease: false, // 隐藏+X动画
    });

    // 在用户触发后，开始播放+X动画和能量增长动画
    this.triggerEnergyIncreaseAnimation(newEnergy);
  },
  triggerEnergyIncreaseAnimation(targetEnergy) {
    // 显示+X动画
    this.setData({ showEnergyIncrease: true });
    setTimeout(() => {
      this.setData({ showEnergyIncrease: false });
    }, 3000); // 控制+X动画显示时间为3秒

    // 同时开始能量增长动画
    this.animateEnergyIncrease(targetEnergy);
  },
  animateEnergyIncrease(targetEnergy) {
    const step = (targetEnergy - this.data.energy) / 30; // 延长动画效果
    const increaseInterval = setInterval(() => {
      let newEnergy = this.data.energy + step;
      if (newEnergy >= targetEnergy) {
        newEnergy = targetEnergy;
        clearInterval(increaseInterval);
      }
      this.setData({
        energy: newEnergy,
        energyPercentage: newEnergy.toFixed(2),
        energyDisplay: newEnergy.toFixed(2),
      });
    }, 40);
  },
  updateSpinCount() {
    const newSpinCount = this.data.spinCount + 1;
    const newPropCount = newSpinCount % 5 === 0 ? this.data.propCount + 1 : this.data.propCount;

    if (newPropCount > this.data.propCount) {
      wx.showToast({
        title: '获得一个消除奖品道具',
        icon: 'none',
      });
    }

    this.setData({
      spinCount: newSpinCount,
      propCount: newPropCount,
    });
  },
  updateProp({ detail: { propChange } }) {
    this.setData({
      propCount: this.data.propCount + propChange,
    });
  },
  updatePrizes({ detail: { prizes } }) {
    this.setData({ prizes });
  },
  onShowRules() {
    const rules = `
1. 每次抽奖消耗10积分
2. 抽奖结果由后台返回
3. 每次抽奖会增加幸运值
4. 幸运值越高，中奖概率可能越大
5. 每抽取5次，获得一个消除奖品的道具`;
    wx.showModal({
      title: '抽奖规则',
      content: rules,
      showCancel: false,
    });
  },
  showEnergyInfo() {
    wx.showModal({
      title: '幸运值说明',
      content: '幸运值表示您当前的幸运程度，幸运值越高，获得大奖的概率越高。',
      showCancel: false,
    });
  },
});

lottery.wxml代码如下:
<!-- pages/lottery/lottery.wxml -->
<view class="container">
  <view class="header">
    <view class="user-info">
      <text>积分：{{points}}</text>
    </view>
    <view class="menu">
      <text class="menu-item" bindtap="onShowRules">规则</text>
    </view>
  </view>

  <view class="energy-bar">
    <text class="energy-text">幸运值：{{energyDisplay}}/100</text>
    <view class="energy-bar-bg">
      <view class="energy-bar-fill" style="{{'width:' + energyPercentage + '%;'}}"></view>
      <!-- 激光效果 -->
      <view class="energy-bar-glow" style="{{'left:' + energyPercentage + '%;'}}"></view>
      <!-- 显示+X的动画，位置在能量条上方 -->
      <view
        wx:if="{{showEnergyIncrease}}"
        class="energy-increase-text"
        style="{{'left:' + energyPercentage + '%;'}}"
      >
        +{{energyIncrease}}
      </view>
    </view>
    <image class="info-icon" src="/assets/question_mark.png" bindtap="showEnergyInfo" />
  </view>

  <wheel
    id="wheelComponent"
    prizes="{{prizes}}"
    points="{{points}}"
    propCount="{{propCount}}"
    bind:consumePoints="consumePoints"
    bind:addPoints="addPoints"
    bind:updateEnergy="updateEnergy"
    bind:spinFinished="updateSpinCount"
    bind:updateProp="updateProp"
    bind:updatePrizes="updatePrizes"
    bind:prizeConfirmed="onPrizeConfirmed"
  />
</view>
lottery.wxss代码如下:
/* pages/lottery/lottery.wxss */
.container {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: #f2f2f2;
  padding-top: 40rpx; /* 向下移动页面 */
}

.header {
  width: 100%;
  display: flex;
  justify-content: space-between;
  padding: 20rpx;
}

.user-info {
  font-size: 30rpx;
  color: #333;
}

.menu-item {
  color: #ff6600;
  font-size: 30rpx;
}

.energy-bar {
  width: 90%;
  margin-top: 20rpx;
  display: flex;
  align-items: center;
}

.energy-text {
  font-size: 26rpx;
  color: #555;
  flex-shrink: 0;
}

.energy-bar-bg {
  flex: 1;
  height: 24rpx;
  background: linear-gradient(90deg, #d1eaff, #66ccff);
  border-radius: 12rpx;
  margin: 0 10rpx;
  position: relative;
}

.energy-bar-fill {
  height: 100%;
  background: linear-gradient(90deg, #ffcc00, #ff6600);
  transition: width 0.5s ease;
  z-index: 1;
}

.info-icon {
  width: 32rpx;
  height: 32rpx;
  flex-shrink: 0;
}

.energy-increase-text {
  position: absolute;
  top: -40rpx;
  transform: translateX(-50%);
  font-size: 24rpx;
  color: #ff3333;
  animation: fadeInOut 3s ease forwards;
  z-index: 3;
}

@keyframes fadeInOut {
  0% { opacity: 0; transform: translateY(10px); }
 20% { opacity: 1; }
 80% { opacity: 1; }
 100% { opacity: 0; transform: translateY(-10px); }
}

/* 能量条上的激光效果 */
.energy-bar-glow {
  position: absolute;
  top: 0;
  height: 100%;
  width: 6rpx;
  background: linear-gradient(180deg, transparent, #ffdd55, #ff9900, transparent);
  box-shadow: 0 0 14rpx rgba(255, 204, 0, 1);
  animation: glowMove 1s infinite linear;
  z-index: 2;
}

@keyframes glowMove {
  0% { opacity: 0.5; }
 50% { opacity: 1; }
 100% { opacity: 0.5; }
}
