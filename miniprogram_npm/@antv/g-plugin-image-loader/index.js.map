{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nvar tslib = require('tslib');\nvar gLite = require('@antv/g-lite');\nvar util = require('@antv/util');\nvar glMatrix = require('gl-matrix');\n\nvar ImagePool = /** @class */ (function () {\n    function ImagePool(canvasConfig) {\n        this.canvasConfig = canvasConfig;\n        this.imageCache = {};\n        this.gradientCache = {};\n        this.patternCache = {};\n    }\n    ImagePool.prototype.getImageSync = function (src, callback) {\n        if (!this.imageCache[src]) {\n            this.getOrCreateImage(src).then(function (img) {\n                if (callback) {\n                    callback(img);\n                }\n            });\n        }\n        else {\n            if (callback) {\n                callback(this.imageCache[src]);\n            }\n        }\n        return this.imageCache[src];\n    };\n    ImagePool.prototype.getOrCreateImage = function (src) {\n        var _this = this;\n        if (this.imageCache[src]) {\n            return Promise.resolve(this.imageCache[src]);\n        }\n        // @see https://github.com/antvis/g/issues/938\n        var createImage = this.canvasConfig.createImage;\n        return new Promise(function (resolve, reject) {\n            var image;\n            if (createImage) {\n                image = createImage(src);\n            }\n            else if (gLite.isBrowser) {\n                image = new window.Image();\n            }\n            if (image) {\n                image.onload = function () {\n                    _this.imageCache[src] = image;\n                    resolve(image);\n                };\n                image.onerror = function (ev) {\n                    reject(ev);\n                };\n                image.crossOrigin = 'Anonymous';\n                image.src = src;\n            }\n        });\n    };\n    ImagePool.prototype.getOrCreatePatternSync = function (pattern, context, $offscreenCanvas, dpr, callback) {\n        var patternKey = this.generatePatternKey(pattern);\n        if (patternKey && this.patternCache[patternKey]) {\n            return this.patternCache[patternKey];\n        }\n        var image = pattern.image, repetition = pattern.repetition, transform = pattern.transform;\n        var src;\n        var needScaleWithDPR = false;\n        // Image URL\n        if (util.isString(image)) {\n            src = this.getImageSync(image, callback);\n        }\n        else if ($offscreenCanvas) {\n            src = $offscreenCanvas;\n            needScaleWithDPR = true;\n        }\n        else {\n            src = image;\n        }\n        // @see https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/createPattern\n        var canvasPattern = src && context.createPattern(src, repetition);\n        if (canvasPattern) {\n            var mat = void 0;\n            // @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern/setTransform\n            if (transform) {\n                mat = gLite.parsedTransformToMat4(gLite.parseTransform(transform), new gLite.DisplayObject({}));\n            }\n            else {\n                mat = glMatrix.mat4.identity(glMatrix.mat4.create());\n            }\n            if (needScaleWithDPR) {\n                glMatrix.mat4.scale(mat, mat, [1 / dpr, 1 / dpr, 1]);\n            }\n            canvasPattern.setTransform({\n                a: mat[0],\n                b: mat[1],\n                c: mat[4],\n                d: mat[5],\n                e: mat[12],\n                f: mat[13],\n            });\n        }\n        if (patternKey && canvasPattern) {\n            this.patternCache[patternKey] = canvasPattern;\n        }\n        return canvasPattern;\n    };\n    ImagePool.prototype.getOrCreateGradient = function (params, context) {\n        var key = this.generateGradientKey(params);\n        var type = params.type, steps = params.steps, width = params.width, height = params.height, angle = params.angle, cx = params.cx, cy = params.cy, size = params.size;\n        if (this.gradientCache[key]) {\n            return this.gradientCache[key];\n        }\n        var gradient = null;\n        if (type === gLite.GradientType.LinearGradient) {\n            var _a = gLite.computeLinearGradient(width, height, angle), x1 = _a.x1, y1 = _a.y1, x2 = _a.x2, y2 = _a.y2;\n            // @see https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/createLinearGradient\n            gradient = context.createLinearGradient(x1, y1, x2, y2);\n        }\n        else if (type === gLite.GradientType.RadialGradient) {\n            var _b = gLite.computeRadialGradient(width, height, cx, cy, size), x = _b.x, y = _b.y, r = _b.r;\n            // @see https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/createRadialGradient\n            gradient = context.createRadialGradient(x, y, 0, x, y, r);\n        }\n        if (gradient) {\n            steps.forEach(function (_a) {\n                var offset = _a.offset, color = _a.color;\n                if (offset.unit === gLite.UnitType.kPercentage) {\n                    gradient === null || gradient === void 0 ? void 0 : gradient.addColorStop(offset.value / 100, color.toString());\n                }\n            });\n            this.gradientCache[key] = gradient;\n        }\n        return this.gradientCache[key];\n    };\n    ImagePool.prototype.generateGradientKey = function (params) {\n        var type = params.type, width = params.width, height = params.height, steps = params.steps, angle = params.angle, cx = params.cx, cy = params.cy, size = params.size;\n        return \"gradient-\".concat(type, \"-\").concat((angle === null || angle === void 0 ? void 0 : angle.toString()) || 0, \"-\").concat((cx === null || cx === void 0 ? void 0 : cx.toString()) || 0, \"-\").concat((cy === null || cy === void 0 ? void 0 : cy.toString()) || 0, \"-\").concat((size === null || size === void 0 ? void 0 : size.toString()) || 0, \"-\").concat(width, \"-\").concat(height, \"-\").concat(steps\n            .map(function (_a) {\n            var offset = _a.offset, color = _a.color;\n            return \"\".concat(offset).concat(color);\n        })\n            .join('-'));\n    };\n    ImagePool.prototype.generatePatternKey = function (pattern) {\n        var image = pattern.image, repetition = pattern.repetition;\n        // only generate cache for Image\n        if (util.isString(image)) {\n            return \"pattern-\".concat(image, \"-\").concat(repetition);\n        }\n        else if (image.nodeName === 'rect') {\n            return \"pattern-\".concat(image.entity, \"-\").concat(repetition);\n        }\n    };\n    return ImagePool;\n}());\n\nvar LoadImagePlugin = /** @class */ (function () {\n    function LoadImagePlugin() {\n    }\n    LoadImagePlugin.prototype.apply = function (context) {\n        var renderingService = context.renderingService, renderingContext = context.renderingContext, imagePool = context.imagePool;\n        var canvas = renderingContext.root.ownerDocument.defaultView;\n        var calculateWithAspectRatio = function (object, imageWidth, imageHeight) {\n            var _a = object.parsedStyle, width = _a.width, height = _a.height;\n            if (width && !height) {\n                object.setAttribute('height', (imageHeight / imageWidth) * width);\n            }\n            else if (!width && height) {\n                object.setAttribute('width', (imageWidth / imageHeight) * height);\n            }\n        };\n        var handleMounted = function (e) {\n            var object = e.target;\n            var nodeName = object.nodeName, attributes = object.attributes;\n            if (nodeName === gLite.Shape.IMAGE) {\n                var img = attributes.img, keepAspectRatio_1 = attributes.keepAspectRatio;\n                if (util.isString(img)) {\n                    imagePool.getImageSync(img, function (_a) {\n                        var width = _a.width, height = _a.height;\n                        if (keepAspectRatio_1) {\n                            calculateWithAspectRatio(object, width, height);\n                        }\n                        // set dirty rectangle flag\n                        object.renderable.dirty = true;\n                        renderingService.dirtify();\n                    });\n                }\n            }\n        };\n        var handleAttributeChanged = function (e) {\n            var object = e.target;\n            var attrName = e.attrName, newValue = e.newValue;\n            if (object.nodeName === gLite.Shape.IMAGE) {\n                if (attrName === 'img') {\n                    if (util.isString(newValue)) {\n                        imagePool.getOrCreateImage(newValue).then(function (_a) {\n                            var width = _a.width, height = _a.height;\n                            if (object.attributes.keepAspectRatio) {\n                                calculateWithAspectRatio(object, width, height);\n                            }\n                            // set dirty rectangle flag\n                            object.renderable.dirty = true;\n                            renderingService.dirtify();\n                        });\n                    }\n                }\n            }\n        };\n        renderingService.hooks.init.tap(LoadImagePlugin.tag, function () {\n            canvas.addEventListener(gLite.ElementEvent.MOUNTED, handleMounted);\n            canvas.addEventListener(gLite.ElementEvent.ATTR_MODIFIED, handleAttributeChanged);\n        });\n        renderingService.hooks.destroy.tap(LoadImagePlugin.tag, function () {\n            canvas.removeEventListener(gLite.ElementEvent.MOUNTED, handleMounted);\n            canvas.removeEventListener(gLite.ElementEvent.ATTR_MODIFIED, handleAttributeChanged);\n        });\n    };\n    LoadImagePlugin.tag = 'LoadImage';\n    return LoadImagePlugin;\n}());\n\nvar Plugin = /** @class */ (function (_super) {\n    tslib.__extends(Plugin, _super);\n    function Plugin() {\n        var _this = _super.apply(this, tslib.__spreadArray([], tslib.__read(arguments), false)) || this;\n        _this.name = 'image-loader';\n        return _this;\n    }\n    Plugin.prototype.init = function () {\n        // @ts-ignore\n        this.context.imagePool = new ImagePool(this.context.config);\n        this.addRenderingPlugin(new LoadImagePlugin());\n    };\n    Plugin.prototype.destroy = function () {\n        this.removeAllRenderingPlugins();\n    };\n    return Plugin;\n}(gLite.AbstractRendererPlugin));\n\nexports.ImagePool = ImagePool;\nexports.Plugin = Plugin;\n//# sourceMappingURL=index.js.map\n"]}