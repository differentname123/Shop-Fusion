{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nvar tslib = require('tslib');\nvar gLite = require('@antv/g-lite');\nvar util = require('@antv/util');\n\nvar CANVAS_CAMERA_ID = 'g-canvas-camera';\nvar HTMLRenderingPlugin = /** @class */ (function () {\n    function HTMLRenderingPlugin() {\n        this.displayObjectHTMLElementMap = new WeakMap();\n    }\n    HTMLRenderingPlugin.prototype.joinTransformMatrix = function (matrix) {\n        return \"matrix(\".concat([\n            matrix[0],\n            matrix[1],\n            matrix[4],\n            matrix[5],\n            matrix[12],\n            matrix[13],\n        ].join(','), \")\");\n    };\n    HTMLRenderingPlugin.prototype.apply = function (context, runtime) {\n        var _this = this;\n        var camera = context.camera, renderingContext = context.renderingContext, renderingService = context.renderingService;\n        this.context = context;\n        var canvas = renderingContext.root.ownerDocument.defaultView;\n        var nativeHTMLMap = canvas.context.eventService.nativeHTMLMap;\n        var setTransform = function (object, $el) {\n            $el.style.transform = _this.joinTransformMatrix(object.getWorldTransform());\n        };\n        var handleMounted = function (e) {\n            var object = e.target;\n            if (object.nodeName === gLite.Shape.HTML) {\n                if (!_this.$camera) {\n                    _this.$camera = _this.createCamera(camera);\n                }\n                // create DOM element\n                var $el_1 = _this.getOrCreateEl(object);\n                _this.$camera.appendChild($el_1);\n                // apply documentElement's style\n                if (runtime.enableCSSParsing) {\n                    var attributes_1 = object.ownerDocument.documentElement.attributes;\n                    Object.keys(attributes_1).forEach(function (name) {\n                        $el_1.style[name] = attributes_1[name];\n                    });\n                }\n                Object.keys(object.attributes).forEach(function (name) {\n                    _this.updateAttribute(name, object);\n                });\n                setTransform(object, $el_1);\n                nativeHTMLMap.set($el_1, object);\n            }\n        };\n        var handleUnmounted = function (e) {\n            var object = e.target;\n            if (object.nodeName === gLite.Shape.HTML && _this.$camera) {\n                var $el = _this.getOrCreateEl(object);\n                if ($el) {\n                    $el.remove();\n                    nativeHTMLMap.delete($el);\n                }\n            }\n        };\n        var handleAttributeChanged = function (e) {\n            var object = e.target;\n            if (object.nodeName === gLite.Shape.HTML) {\n                var attrName = e.attrName;\n                _this.updateAttribute(attrName, object);\n            }\n        };\n        var handleBoundsChanged = function (e) {\n            var object = e.target;\n            if (object.nodeName === gLite.Shape.HTML) {\n                var $el = _this.getOrCreateEl(object);\n                setTransform(object, $el);\n            }\n        };\n        var handleCanvasResize = function () {\n            if (_this.$camera) {\n                var _a = _this.context.config, width = _a.width, height = _a.height;\n                _this.$camera.style.width = \"\".concat(width || 0, \"px\");\n                _this.$camera.style.height = \"\".concat(height || 0, \"px\");\n            }\n        };\n        renderingService.hooks.init.tap(HTMLRenderingPlugin.tag, function () {\n            canvas.addEventListener(gLite.CanvasEvent.RESIZE, handleCanvasResize);\n            canvas.addEventListener(gLite.ElementEvent.MOUNTED, handleMounted);\n            canvas.addEventListener(gLite.ElementEvent.UNMOUNTED, handleUnmounted);\n            canvas.addEventListener(gLite.ElementEvent.ATTR_MODIFIED, handleAttributeChanged);\n            canvas.addEventListener(gLite.ElementEvent.BOUNDS_CHANGED, handleBoundsChanged);\n        });\n        renderingService.hooks.endFrame.tap(HTMLRenderingPlugin.tag, function () {\n            if (_this.$camera &&\n                renderingContext.renderReasons.has(gLite.RenderReason.CAMERA_CHANGED)) {\n                _this.$camera.style.transform = _this.joinTransformMatrix(camera.getOrthoMatrix());\n            }\n        });\n        renderingService.hooks.destroy.tap(HTMLRenderingPlugin.tag, function () {\n            // remove camera\n            if (_this.$camera) {\n                _this.$camera.remove();\n            }\n            canvas.removeEventListener(gLite.CanvasEvent.RESIZE, handleCanvasResize);\n            canvas.removeEventListener(gLite.ElementEvent.MOUNTED, handleMounted);\n            canvas.removeEventListener(gLite.ElementEvent.UNMOUNTED, handleUnmounted);\n            canvas.removeEventListener(gLite.ElementEvent.ATTR_MODIFIED, handleAttributeChanged);\n            canvas.removeEventListener(gLite.ElementEvent.BOUNDS_CHANGED, handleBoundsChanged);\n        });\n    };\n    HTMLRenderingPlugin.prototype.createCamera = function (camera) {\n        var _a = this.context.config, doc = _a.document, width = _a.width, height = _a.height;\n        var $canvas = this.context.contextService.getDomElement();\n        var $container = $canvas.parentNode;\n        if ($container) {\n            var cameraId = CANVAS_CAMERA_ID;\n            var $existedCamera = $container.querySelector('#' + cameraId);\n            if (!$existedCamera) {\n                var $camera = (doc || document).createElement('div');\n                $existedCamera = $camera;\n                $camera.id = cameraId;\n                // use absolute position\n                $camera.style.position = 'absolute';\n                // account for DOM element's offset @see https://github.com/antvis/G/issues/1150\n                $camera.style.left = \"\".concat($canvas.offsetLeft || 0, \"px\");\n                $camera.style.top = \"\".concat($canvas.offsetTop || 0, \"px\");\n                $camera.style.transformOrigin = 'left top';\n                $camera.style.transform = this.joinTransformMatrix(camera.getOrthoMatrix());\n                // HTML elements should not overflow with canvas @see https://github.com/antvis/G/issues/1163\n                $camera.style.overflow = 'hidden';\n                $camera.style.pointerEvents = 'none';\n                $camera.style.width = \"\".concat(width || 0, \"px\");\n                $camera.style.height = \"\".concat(height || 0, \"px\");\n                $container.appendChild($camera);\n            }\n            return $existedCamera;\n        }\n        return null;\n    };\n    HTMLRenderingPlugin.prototype.getOrCreateEl = function (object) {\n        var doc = this.context.config.document;\n        var $existedElement = this.displayObjectHTMLElementMap.get(object);\n        if (!$existedElement) {\n            $existedElement = (doc || document).createElement('div');\n            object.parsedStyle.$el = $existedElement;\n            this.displayObjectHTMLElementMap.set(object, $existedElement);\n            if (object.id) {\n                $existedElement.id = object.id;\n            }\n            if (object.name) {\n                $existedElement.setAttribute('name', object.name);\n            }\n            if (object.className) {\n                $existedElement.className = object.className;\n            }\n            // use absolute position\n            $existedElement.style.position = 'absolute';\n            // @see https://github.com/antvis/G/issues/1150\n            $existedElement.style.left = \"0px\";\n            $existedElement.style.top = \"0px\";\n            $existedElement.style['will-change'] = 'transform';\n            $existedElement.style.transform = this.joinTransformMatrix(object.getWorldTransform());\n        }\n        return $existedElement;\n    };\n    HTMLRenderingPlugin.prototype.updateAttribute = function (name, object) {\n        var $el = this.getOrCreateEl(object);\n        switch (name) {\n            case 'innerHTML':\n                var innerHTML = object.parsedStyle.innerHTML;\n                if (util.isString(innerHTML)) {\n                    $el.innerHTML = innerHTML;\n                }\n                else {\n                    $el.innerHTML = '';\n                    $el.appendChild(innerHTML);\n                }\n                break;\n            case 'transformOrigin':\n                var transformOrigin = object.parsedStyle.transformOrigin;\n                $el.style['transform-origin'] = \"\".concat(transformOrigin[0].value, \" \").concat(transformOrigin[1].value);\n                break;\n            case 'width':\n                if (this.context.enableCSSParsing) {\n                    var width = object.computedStyleMap().get('width');\n                    $el.style.width = width.toString();\n                }\n                else {\n                    var width = object.parsedStyle.width;\n                    $el.style.width = util.isNumber(width)\n                        ? \"\".concat(width, \"px\")\n                        : width.toString();\n                }\n                break;\n            case 'height':\n                if (this.context.enableCSSParsing) {\n                    var height = object.computedStyleMap().get('height');\n                    $el.style.height = height.toString();\n                }\n                else {\n                    var height = object.parsedStyle.height;\n                    $el.style.height = util.isNumber(height)\n                        ? \"\".concat(height, \"px\")\n                        : height.toString();\n                }\n                break;\n            case 'zIndex':\n                var zIndex = object.parsedStyle.zIndex;\n                $el.style['z-index'] = \"\".concat(zIndex);\n                break;\n            case 'visibility':\n                var visibility = object.parsedStyle.visibility;\n                $el.style.visibility = visibility;\n                break;\n            case 'pointerEvents':\n                var pointerEvents = object.parsedStyle.pointerEvents;\n                $el.style.pointerEvents = pointerEvents;\n                break;\n            case 'opacity':\n                var opacity = object.parsedStyle.opacity;\n                $el.style.opacity = \"\".concat(opacity);\n                break;\n            case 'fill':\n                var fill = object.parsedStyle.fill;\n                var color = '';\n                if (gLite.isCSSRGB(fill)) {\n                    if (fill.isNone) {\n                        color = 'transparent';\n                    }\n                    else {\n                        color = object.getAttribute('fill');\n                    }\n                }\n                else if (Array.isArray(fill)) {\n                    color = object.getAttribute('fill');\n                }\n                else if (gLite.isPattern(fill)) ;\n                $el.style.background = color;\n                break;\n            case 'stroke':\n                var stroke = object.parsedStyle.stroke;\n                var borderColor = '';\n                if (gLite.isCSSRGB(stroke)) {\n                    if (stroke.isNone) {\n                        borderColor = 'transparent';\n                    }\n                    else {\n                        borderColor = object.getAttribute('stroke');\n                    }\n                }\n                else if (Array.isArray(stroke)) {\n                    borderColor = object.getAttribute('stroke');\n                }\n                else if (gLite.isPattern(stroke)) ;\n                $el.style['border-color'] = borderColor;\n                $el.style['border-style'] = 'solid';\n                break;\n            case 'lineWidth':\n                var lineWidth = object.parsedStyle.lineWidth;\n                $el.style['border-width'] = \"\".concat(lineWidth || 0, \"px\");\n                break;\n            case 'lineDash':\n                $el.style['border-style'] = 'dashed';\n                break;\n            case 'filter':\n                var filter = object.style.filter;\n                $el.style.filter = filter;\n                break;\n            default:\n                if (name !== 'x' && name !== 'y') {\n                    if (!util.isNil(object.style[name]) && object.style[name] !== '') {\n                        $el.style[name] = object.style[name];\n                    }\n                }\n        }\n    };\n    HTMLRenderingPlugin.tag = 'HTMLRendering';\n    return HTMLRenderingPlugin;\n}());\n\nvar Plugin = /** @class */ (function (_super) {\n    tslib.__extends(Plugin, _super);\n    function Plugin() {\n        var _this = _super.apply(this, tslib.__spreadArray([], tslib.__read(arguments), false)) || this;\n        _this.name = 'html-renderer';\n        return _this;\n    }\n    Plugin.prototype.init = function () {\n        this.addRenderingPlugin(new HTMLRenderingPlugin());\n    };\n    Plugin.prototype.destroy = function () {\n        this.removeAllRenderingPlugins();\n    };\n    return Plugin;\n}(gLite.AbstractRendererPlugin));\n\nexports.Plugin = Plugin;\n//# sourceMappingURL=index.js.map\n"]}