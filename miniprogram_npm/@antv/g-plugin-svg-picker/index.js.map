{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nvar tslib = require('tslib');\nvar gLite = require('@antv/g-lite');\n\n/**\n * pick shape(s) with Mouse/Touch event\n *\n * 1. find AABB with r-tree\n * 2. use elementFromPoint\n */\nvar SVGPickerPlugin = /** @class */ (function () {\n    function SVGPickerPlugin() {\n    }\n    SVGPickerPlugin.prototype.apply = function (context, runtime) {\n        var _this = this;\n        var doc = context.config.document, renderingService = context.renderingService, \n        // @ts-ignore\n        svgElementMap = context.svgElementMap;\n        renderingService.hooks.pick.tapPromise(SVGPickerPlugin.tag, function (result) { return tslib.__awaiter(_this, void 0, void 0, function () {\n            return tslib.__generator(this, function (_a) {\n                return [2 /*return*/, this.pick(svgElementMap, doc, result)];\n            });\n        }); });\n        renderingService.hooks.pickSync.tap(SVGPickerPlugin.tag, function (result) {\n            return _this.pick(svgElementMap, doc, result);\n        });\n    };\n    SVGPickerPlugin.prototype.pick = function (svgElementMap, doc, result) {\n        var e_1, _a;\n        var topmost = result.topmost, _b = result.position, clientX = _b.clientX, clientY = _b.clientY;\n        try {\n            var targets = [];\n            try {\n                // @see https://developer.mozilla.org/zh-CN/docs/Web/API/Document/elementsFromPoint\n                for (var _c = tslib.__values((doc || document).elementsFromPoint(clientX, clientY)), _d = _c.next(); !_d.done; _d = _c.next()) {\n                    var element = _d.value;\n                    if (element.shadowRoot && element.shadowRoot !== doc) {\n                        return this.pick(svgElementMap, element.shadowRoot, result);\n                    }\n                    else {\n                        var target = svgElementMap.get(element);\n                        // don't need to account for `visibility` since DOM API already does\n                        if (target && target.isInteractive()) {\n                            targets.push(target);\n                            if (topmost) {\n                                result.picked = targets;\n                                return result;\n                            }\n                        }\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            result.picked = targets;\n        }\n        catch (e) {\n            result.picked = [];\n        }\n        return result;\n    };\n    SVGPickerPlugin.tag = 'SVGPicker';\n    return SVGPickerPlugin;\n}());\n\nvar Plugin = /** @class */ (function (_super) {\n    tslib.__extends(Plugin, _super);\n    function Plugin() {\n        var _this = _super.apply(this, tslib.__spreadArray([], tslib.__read(arguments), false)) || this;\n        _this.name = 'svg-picker';\n        return _this;\n    }\n    Plugin.prototype.init = function () {\n        this.addRenderingPlugin(new SVGPickerPlugin());\n    };\n    Plugin.prototype.destroy = function () {\n        this.removeAllRenderingPlugins();\n    };\n    return Plugin;\n}(gLite.AbstractRendererPlugin));\n\nexports.Plugin = Plugin;\n//# sourceMappingURL=index.js.map\n"]}