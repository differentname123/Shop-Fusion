{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nvar tslib = require('tslib');\nvar gLite = require('@antv/g-lite');\n\n/**\n * listen to mouse/touch/pointer events on DOM wrapper, trigger pointer events\n */\nvar MobileInteractionPlugin = /** @class */ (function () {\n    function MobileInteractionPlugin() {\n    }\n    MobileInteractionPlugin.prototype.apply = function (context) {\n        var renderingService = context.renderingService, contextService = context.contextService, config = context.config;\n        // 获取小程序上下文\n        var canvasEl = contextService.getDomElement();\n        var onPointerDown = function (ev) {\n            renderingService.hooks.pointerDown.call(ev);\n        };\n        var onPointerUp = function (ev) {\n            renderingService.hooks.pointerUp.call(ev);\n        };\n        var onPointerMove = function (ev) {\n            // 触发 G 定义的标准 pointerMove 事件\n            renderingService.hooks.pointerMove.call(ev);\n        };\n        var onPointerOver = function (ev) {\n            renderingService.hooks.pointerOver.call(ev);\n        };\n        var onPointerOut = function (ev) {\n            renderingService.hooks.pointerOut.call(ev);\n        };\n        var onClick = function (ev) {\n            renderingService.hooks.click.call(ev);\n        };\n        var onPointerCancel = function (ev) {\n            renderingService.hooks.pointerCancel.call(ev);\n        };\n        renderingService.hooks.init.tap(MobileInteractionPlugin.tag, function () {\n            // 基于小程序上下文的事件监听方式，绑定事件监听，可以参考下面基于 DOM 的方式\n            canvasEl.addEventListener('touchstart', onPointerDown, true);\n            canvasEl.addEventListener('touchend', onPointerUp, true);\n            canvasEl.addEventListener('touchmove', onPointerMove, true);\n            canvasEl.addEventListener('touchcancel', onPointerCancel, true);\n            // FIXME: 这里不应该只在 canvasEl 上监听 mousemove 和 mouseup，而应该在更高层级的节点上例如 document 监听。\n            // 否则无法判断是否移出了 canvasEl\n            // canvasEl.addEventListener('mousemove', onPointerMove, true);\n            // canvasEl.addEventListener('mousedown', onPointerDown, true);\n            canvasEl.addEventListener('mouseout', onPointerOut, true);\n            canvasEl.addEventListener('mouseover', onPointerOver, true);\n            // canvasEl.addEventListener('mouseup', onPointerUp, true);\n            if (config.useNativeClickEvent) {\n                canvasEl.addEventListener('click', onClick, true);\n            }\n        });\n        renderingService.hooks.destroy.tap(MobileInteractionPlugin.tag, function () {\n            // 基于小程序上下文的事件监听方式，移除事件监听\n            canvasEl.removeEventListener('touchstart', onPointerDown, true);\n            canvasEl.removeEventListener('touchend', onPointerUp, true);\n            canvasEl.removeEventListener('touchmove', onPointerMove, true);\n            canvasEl.removeEventListener('touchcancel', onPointerCancel, true);\n            // canvasEl.removeEventListener('mousemove', onPointerMove, true);\n            // canvasEl.removeEventListener('mousedown', onPointerDown, true);\n            canvasEl.removeEventListener('mouseout', onPointerOut, true);\n            canvasEl.removeEventListener('mouseover', onPointerOver, true);\n            // canvasEl.removeEventListener('mouseup', onPointerUp, true);\n            if (config.useNativeClickEvent) {\n                canvasEl.removeEventListener('click', onClick, true);\n            }\n        });\n    };\n    MobileInteractionPlugin.tag = 'MobileInteraction';\n    return MobileInteractionPlugin;\n}());\n\nvar Plugin = /** @class */ (function (_super) {\n    tslib.__extends(Plugin, _super);\n    function Plugin() {\n        var _this = _super.apply(this, tslib.__spreadArray([], tslib.__read(arguments), false)) || this;\n        _this.name = 'mobile-interaction';\n        return _this;\n    }\n    Plugin.prototype.init = function () {\n        this.addRenderingPlugin(new MobileInteractionPlugin());\n    };\n    Plugin.prototype.destroy = function () {\n        this.removeAllRenderingPlugins();\n    };\n    return Plugin;\n}(gLite.AbstractRendererPlugin));\n\nexports.Plugin = Plugin;\n//# sourceMappingURL=index.js.map\n"]}