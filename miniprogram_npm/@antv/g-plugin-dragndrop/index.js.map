{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nvar tslib = require('tslib');\nvar gLite = require('@antv/g-lite');\nvar util = require('@antv/util');\n\nvar DragndropPlugin = /** @class */ (function () {\n    function DragndropPlugin(dragndropPluginOptions) {\n        this.dragndropPluginOptions = dragndropPluginOptions;\n    }\n    DragndropPlugin.prototype.apply = function (context) {\n        var _this = this;\n        var renderingService = context.renderingService, renderingContext = context.renderingContext;\n        var document = renderingContext.root.ownerDocument;\n        // TODO: should we add an option like `draggable` to Canvas\n        var canvas = document.defaultView;\n        var handlePointerdown = function (event) {\n            var target = event.target;\n            var isDocument = target === document;\n            var draggableEventTarget = isDocument && _this.dragndropPluginOptions.isDocumentDraggable\n                ? document\n                : target.closest && target.closest('[draggable=true]');\n            // `draggable` may be set on ancestor nodes:\n            // @see https://github.com/antvis/G/issues/1088\n            if (draggableEventTarget) {\n                // delay triggering dragstart event\n                var dragstartTriggered_1 = false;\n                var dragstartTimeStamp_1 = event.timeStamp;\n                var dragstartClientCoordinates_1 = [\n                    event.clientX,\n                    event.clientY,\n                ];\n                var currentDroppable_1 = null;\n                var lastDragClientCoordinates_1 = [event.clientX, event.clientY];\n                // @ts-ignore\n                // eslint-disable-next-line no-inner-declarations\n                var handlePointermove_1 = function (event) { return tslib.__awaiter(_this, void 0, void 0, function () {\n                    var timeElapsed, distanceMoved, point, elementsBelow, elementBelow, droppableBelow;\n                    return tslib.__generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                if (!dragstartTriggered_1) {\n                                    timeElapsed = event.timeStamp - dragstartTimeStamp_1;\n                                    distanceMoved = util.distanceSquareRoot([event.clientX, event.clientY], dragstartClientCoordinates_1);\n                                    // check thresholds\n                                    if (timeElapsed <=\n                                        this.dragndropPluginOptions.dragstartTimeThreshold ||\n                                        distanceMoved <=\n                                            this.dragndropPluginOptions.dragstartDistanceThreshold) {\n                                        return [2 /*return*/];\n                                    }\n                                    // @see https://developer.mozilla.org/zh-CN/docs/Web/API/Document/dragstart_event\n                                    event.type = 'dragstart';\n                                    draggableEventTarget.dispatchEvent(event);\n                                    dragstartTriggered_1 = true;\n                                }\n                                // @see https://developer.mozilla.org/zh-CN/docs/Web/API/Document/drag_event\n                                event.type = 'drag';\n                                // @ts-ignore\n                                event.dx = event.clientX - lastDragClientCoordinates_1[0];\n                                // @ts-ignore\n                                event.dy = event.clientY - lastDragClientCoordinates_1[1];\n                                draggableEventTarget.dispatchEvent(event);\n                                lastDragClientCoordinates_1 = [event.clientX, event.clientY];\n                                if (!!isDocument) return [3 /*break*/, 2];\n                                point = this.dragndropPluginOptions.overlap === 'pointer'\n                                    ? [event.canvasX, event.canvasY]\n                                    : target.getBounds().center;\n                                return [4 /*yield*/, document.elementsFromPoint(point[0], point[1])];\n                            case 1:\n                                elementsBelow = _a.sent();\n                                elementBelow = elementsBelow[elementsBelow.indexOf(target) + 1];\n                                droppableBelow = (elementBelow === null || elementBelow === void 0 ? void 0 : elementBelow.closest('[droppable=true]')) ||\n                                    (this.dragndropPluginOptions.isDocumentDroppable\n                                        ? document\n                                        : null);\n                                if (currentDroppable_1 !== droppableBelow) {\n                                    if (currentDroppable_1) {\n                                        // null when we were not over a droppable before this event\n                                        // @see https://developer.mozilla.org/zh-CN/docs/Web/API/Document/dragleave_event\n                                        event.type = 'dragleave';\n                                        event.target = currentDroppable_1;\n                                        currentDroppable_1.dispatchEvent(event);\n                                    }\n                                    if (droppableBelow) {\n                                        // @see https://developer.mozilla.org/zh-CN/docs/Web/API/Document/dragleave_event\n                                        event.type = 'dragenter';\n                                        event.target = droppableBelow;\n                                        droppableBelow.dispatchEvent(event);\n                                    }\n                                    currentDroppable_1 = droppableBelow;\n                                    if (currentDroppable_1) {\n                                        // null if we're not coming over a droppable now\n                                        // @see https://developer.mozilla.org/zh-CN/docs/Web/API/Document/dragover_event\n                                        event.type = 'dragover';\n                                        event.target = currentDroppable_1;\n                                        currentDroppable_1.dispatchEvent(event);\n                                    }\n                                }\n                                _a.label = 2;\n                            case 2: return [2 /*return*/];\n                        }\n                    });\n                }); };\n                canvas.addEventListener('pointermove', handlePointermove_1);\n                var stopDragging = function (originalPointerUpEvent) {\n                    if (dragstartTriggered_1) {\n                        // prevent click event being triggerd\n                        // @see https://github.com/antvis/G/issues/1091\n                        originalPointerUpEvent.detail = {\n                            preventClick: true,\n                        };\n                        // clone event first\n                        var event_1 = originalPointerUpEvent.clone();\n                        // drop should fire before dragend\n                        // @see https://javascript.tutorialink.com/is-there-a-defined-ordering-between-dragend-and-drop-events/\n                        if (currentDroppable_1) {\n                            // @see https://developer.mozilla.org/zh-CN/docs/Web/API/Document/drop_event\n                            event_1.type = 'drop';\n                            event_1.target = currentDroppable_1;\n                            currentDroppable_1.dispatchEvent(event_1);\n                        }\n                        // @see https://developer.mozilla.org/zh-CN/docs/Web/API/Document/dragend_event\n                        event_1.type = 'dragend';\n                        draggableEventTarget.dispatchEvent(event_1);\n                        dragstartTriggered_1 = false;\n                    }\n                    canvas.removeEventListener('pointermove', handlePointermove_1);\n                };\n                target.addEventListener('pointerup', stopDragging, { once: true });\n                target.addEventListener('pointerupoutside', stopDragging, {\n                    once: true,\n                });\n            }\n        };\n        renderingService.hooks.init.tap(DragndropPlugin.tag, function () {\n            canvas.addEventListener('pointerdown', handlePointerdown);\n        });\n        renderingService.hooks.destroy.tap(DragndropPlugin.tag, function () {\n            canvas.removeEventListener('pointerdown', handlePointerdown);\n        });\n    };\n    DragndropPlugin.tag = 'Dragndrop';\n    return DragndropPlugin;\n}());\n\nvar Plugin = /** @class */ (function (_super) {\n    tslib.__extends(Plugin, _super);\n    function Plugin(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this) || this;\n        _this.options = options;\n        _this.name = 'dragndrop';\n        return _this;\n    }\n    Plugin.prototype.init = function () {\n        this.addRenderingPlugin(new DragndropPlugin(tslib.__assign({ overlap: 'pointer', isDocumentDraggable: false, isDocumentDroppable: false, dragstartDistanceThreshold: 0, dragstartTimeThreshold: 0 }, this.options)));\n    };\n    Plugin.prototype.destroy = function () {\n        this.removeAllRenderingPlugins();\n    };\n    Plugin.prototype.setOptions = function (options) {\n        Object.assign(this.plugins[0].dragndropPluginOptions, options);\n    };\n    return Plugin;\n}(gLite.AbstractRendererPlugin));\n\nexports.Plugin = Plugin;\n//# sourceMappingURL=index.js.map\n"]}