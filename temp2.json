帮我按照下面几个方面调整下面的云函数：
1.根据has_more决定是否继续请求，当has_more为True时，page_index+1，继续请求
2.最后返回的结果不能只是"成功处理 20 条数据"，应该变成 "总共 20 条数据，3 条插入，17 条更新，0 条失败。"
云函数代码如下:
// 引入依赖
const cloud = require('wx-server-sdk');
const axios = require('axios');
const fs = require('fs');
const path = require('path');
const request = require('request-promise');

// 初始化云开发环境
cloud.init();

/**
 * 从数据库获取 headers 和 team_id
 * @param {object} db 数据库实例
 * @returns {Array} headers 列表
 */
const getHeadersFromDatabase = async (db) => {
  try {
    const headerResult = await db.collection('headerTable').get();
    console.log('成功获取 headers 列表，共计:', headerResult.data.length);
    return headerResult.data.map(item => ({
      headers: JSON.parse(item.header),
      team_id: item.team_id
    }));
  } catch (error) {
    console.error('获取 headers 失败:', error);
    throw new Error('无法获取请求头。');
  }
};

/**
 * 使用 pdd.js 文件生成 anti-content
 * @returns {string} anti_content
 */
const generateAntiContent = () => {
  // 保存原始的 console.log
  const originalConsoleLog = console.log;

  // 临时重写 console.log，防止输出日志
  console.log = () => {};

  try {
    // 读取本地的 JS 文件
    const jsFilePath = path.resolve(__dirname, 'pdd.js');
    const jsCode = fs.readFileSync(jsFilePath, 'utf-8');

    // 创建一个模拟的 window 对象
    const window = {};

    // 执行 pdd.js 文件中的代码
    eval(jsCode);

    // 检查是否定义了 antigain 函数
    if (typeof window.antigain === 'function') {
      return window.antigain();
    } else if (typeof antigain === 'function') {
      // 如果 antigain 直接定义为全局函数
      return antigain();
    } else {
      throw new Error('antigain is not defined in pdd.js');
    }
  } finally {
    // 恢复原来的 console.log
    console.log = originalConsoleLog;
  }
};

/**
 * 执行 HTTP 请求并打印返回结果
 * @param {string} url 请求的基础 URL
 * @param {object} headers 请求头
 * @param {object} params 请求参数
 * @returns {object} 响应对象
 */
const makeHttpRequest = async (url, headers, params) => {
  try {

    // 确保请求参数是有效的对象
    if (!params || typeof params !== 'object') {
      throw new Error('请求参数不正确，params 必须是一个对象。');
    }

    // 配置请求选项
    const options = {
      method: 'POST',
      uri: url,
      headers: headers,  // 传递 headers
      body: params,      // 传递请求参数
      json: true,        // 自动将 body 转换为 JSON
      resolveWithFullResponse: true,  // 返回完整的响应对象
      simple: false,  // 不抛出非 2xx 状态码的错误
    };

    // 发送 POST 请求
    const response = await request(options);

    console.error('HTTP 请求成功，状态码:', response.statusCode);
    // console.error('返回的数据:', response.body);

    return response;  // 返回完整的响应对象

  } catch (error) {
    console.error('HTTP 请求失败：', error.message);
    throw new Error(`请求失败：${error.message}`);
  }
};

/**
 * 处理请求得到的 rawData 并返回合并后的数据列表
 * @param {object} rawData 解析后的 rawData 对象
 * @returns {Array} 处理后适配的数据列表
 */
const processRawData = (rawData, db) => {
  try {
    // 提取数据列表，假设我们需要 'group_order_list' 中的数据
    const groupOrderLists = rawData.result.group_order_list || [];
    console.error(`找到 ${groupOrderLists.length} 个 group_order_list。`);

    // 遍历处理每个 item
    return groupOrderLists.map(item => {
      // 打印当前处理的 item
      // console.error('处理 item:', JSON.stringify(item));

      // 计算价格差
      const priceReduce = item.origin_price - item.activity_price;
      // 计算参与人数
      const customerNum = (Array.isArray(item.group_member_avatar_list) ? item.group_member_avatar_list.length : 0) + (item.need_invite_customer_num || 0);

      return {
        goodsId: String(item.goods_id), // 适配字段名称
        hdThumbUrl: item.hd_url, // 适配字段名称
        goodsName: item.goods_name,
        originActivityPrice: item.activity_price,
        priceReduce: priceReduce,
        customerNum: customerNum,
        groupOrderId: item.group_order_id,
        expireTime: item.expire_time,
        groupStatus: item.group_status,
        groupUserNum: customerNum - (item.need_invite_customer_num || 0), // 当前人数
        groupRemainCount: item.need_invite_customer_num || 0, // 还需人数
        sourceType: 'autogroup', // 添加 sourceType 字段
        updateTime: db.serverDate()
      };
    });
  } catch (error) {
    console.error('处理 rawData 时发生错误:', error);
    throw new Error('处理 rawData 时发生错误');
  }
};

/**
 * 更新或插入数据库中的 goodsInfoTable
 * @param {object} db 数据库实例
 * @param {object} individualData 每条数据对象
 * @returns {object} 更新或插入的结果
 */
const updateDatabase = async (db, individualData) => {
  try {
    console.log(`尝试更新数据库记录，goodsId: ${individualData.goodsId}, groupOrderId: ${individualData.groupOrderId}`);
    const res = await db.collection('goodsInfoTable').where({
      goodsId: individualData.goodsId,
      groupOrderId: individualData.groupOrderId
    }).update({
      data: individualData,
    });

    console.log(`更新 goodsInfo 记录，更新数量：${res.stats.updated}`);

    if (res.stats.updated === 0) {
      const addRes = await db.collection('goodsInfoTable').add({
        data: individualData,
      });
      console.log(`插入新的 goodsInfo 记录，记录 ID：${addRes._id}`);
      return { status: 'inserted' };
    } else {
      return { status: 'updated' };
    }
  } catch (dbError) {
    console.error('数据库操作时发生错误：', dbError);
    return { status: 'failed', error: dbError.message };
  }
};

/**
 * 主函数：执行请求并存储数据
 */
exports.main = async (event, context) => {
  const db = cloud.database();

  // 获取云函数的 IP 地址
  try {
    const ipResponse = await axios.get('https://httpbin.org/ip');
    console.log('Cloud Function IP Address:', ipResponse.data.origin);
  } catch (error) {
    console.error('获取 IP 地址失败：', error);
    return { status: 'error', message: '无法获取 IP 地址。' };
  }

  // 构建请求 URL
  const baseUrl = "https://mobile.pinduoduo.com/proxy/api/api/brand-group/team/group_order_list?pdduid=4365968471";

  // 获取 headers 列表
  let headersList;
  try {
    headersList = await getHeadersFromDatabase(db);
    if (headersList.length === 0) {
      console.error('headerTable 中没有可用的 headers。');
      return { status: 'error', message: '没有可用的请求头。' };
    }
  } catch (error) {
    return { status: 'error', message: error.message };
  }

  /**
   * 尝试使用所有 headers 进行请求，直到成功
   * @returns {object} 最终结果
   */
  const tryHeadersSequentially = async () => {
    for (let i = 0; i < headersList.length; i++) {
      const { headers, team_id } = headersList[i];
      console.log(`尝试使用 headerTable 中索引 ${i} 的 headers。team_id: ${team_id}`);
  
      try {
        // 更新请求参数中的 team_id，同时生成新的 anti_content
        const updatedParams = {
          "page_index": 1,
          "page_size": 20,
          "team_id": team_id,
          "anti_content": generateAntiContent(), // 动态生成 anti-content
        };
  
        // 发起请求并打印返回值
        const response = await makeHttpRequest(baseUrl, headers, updatedParams);
        // 检查响应的状态码
        if (response.statusCode === 200) {
          const rawData = response.body;  // 替换为 response.body 来获取数据
          let has_more = rawData.result.hase_more;
          // console.error('成功获取并解析到的 rawData:', JSON.stringify(rawData));
  
          // 处理原始数据
          const processedData = processRawData(rawData, db);
  
          // 遍历并插入/更新每条数据
          for (const individualData of processedData) {
            await updateDatabase(db, individualData);
          }
  
          console.log('数据处理完成。');
          return {
            status: 'success',
            message: `成功处理 ${processedData.length} 条数据`,
          };
        } else {
          throw new Error(`请求失败，状态码：${response.statusCode}`);
        }
      } catch (error) {
        console.error(`使用索引 ${i} 的 headers 请求失败：${error.message}`);
        // 继续尝试下一个 headers
      }
    }
  
    return { status: 'error', message: '所有 headers 尝试均失败。' };
  };

  // 执行尝试
  const finalResult = await tryHeadersSequentially();

  // 返回最终结果
  return finalResult;
};